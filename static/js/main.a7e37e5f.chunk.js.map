{"version":3,"sources":["components/Styled.js","components/Button.js","Main.js","components/ReduxAction.js","components/Progressbar.js","components/CheckBox.js","Example.js","Test.js","Finish.js","functions/objectToString.js","chart/ResultChart.js","chart/UserTable.js","functions/getTodayDate.js","chart/JobTable.js","Result.js","App.js","index.js"],"names":["Article","styled","article","props","long","FlexBox","div","testPage","Form","form","ErrorText","p","Explanation","resultPage","Button","ButtonDiv","ButtonStyle","type","onClick","movePrevPage","text","button","Main","navigate","useNavigate","dispatch","useDispatch","reduxtState","useSelector","state","userName","user_name","userGender","user_gender","useForm","register","handleSubmit","errors","formState","onSubmit","data","name","gender","NameBox","ItemText","defaultValue","required","GenderBox","value","defaultChecked","Progressbar","percent","Percent","ProgressbarBox","ProgressbarGauge","String","CheckBox","title01","value01","answerscore01","answer01","title02","value02","answerscore02","answer02","useState","userSelect","setUserSelect","useFormContext","getSelect","event","cur","target","Text","RadioBox","checked","Example","methods","ex","Test","result","setResult","page","Math","ceil","length","currentPage","setCurrentPage","currentQ","slice","floor","moveNextPage","QuestionCall","a","axios","get","response","res","RESULT","console","error","renderQ","map","item","index","useEffect","window","scrollTo","top","behavior","select","ButtonBox","Finish","username","usergender","total","user_select","string_total","object","array","i","push","sort_array","sort","b","string","j","concat","trim","objectToString","method","url","then","url_seq","split","score_object","wonScore","forEach","num","Number","sessionStorage","setItem","JSON","stringify","catch","log","FinishText","to","h2","ResultChart","parse","getItem","labels","Object","values","datasets","label","backgroundColor","ResultChartDiv","options","scales","y","max","plugins","legend","position","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","StyledTableCell","styles","TableCell","theme","tableCellClasses","head","color","palette","common","white","fontWeight","border","body","fontSize","StyledTableRow","TableRow","action","hover","UserTable","date","TodayDate","today","Date","getFullYear","getMonth","getDate","getTodayDate","rows","UserTableDiv","TableContainer","component","Paper","Table","sx","maxWidth","TableHead","align","TableBody","row","JobTable","jobs","school","major","keys","field","job","join","minWidth","height","scope","width","Result","firstValue","getTopValue","secondValue","schoolJob","setSchoolJob","majorJob","setMajorJob","resultValueArray","maxValue","topValue","findIndex","jobCall","TableTitle","LinkBox","clear","Link","App","GlobalStyle","path","element","createGlobalStyle","initialState","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7e37e5f.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Article = styled.article`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  height: ${props => props.long ? \"100%\" : \"100vh\"};\r\n`;\r\n\r\nexport const FlexBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  margin: ${props => props.testPage ? \"50px\" : \"0\"};\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const ErrorText = styled.p`\r\n  color: #ff6fa5;\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nexport const Explanation = styled.p`\r\n  line-height: 150%;\r\n\r\n  font-size: 1rem;\r\n  font-weight: ${props => props.resultPage || \"bold\"};\r\n  text-align: ${props => props.resultPage && \"left\"};\r\n\r\n  margin: ${props => props.resultPage ? \"10px\" : \"30px\"} 0;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport function Button(props) {\r\n\r\n  return (\r\n    <ButtonDiv>\r\n      <ButtonStyle \r\n        type={props.type}\r\n        onClick={props?.movePrevPage && props.movePrevPage}>\r\n          {props.text}\r\n      </ButtonStyle>\r\n    </ButtonDiv>\r\n  );\r\n}\r\n\r\n// styled-components\r\nconst ButtonDiv = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nconst ButtonStyle = styled.button`\r\n    all: unset;\r\n\r\n    width: 100px;\r\n    height: 40px;\r\n\r\n    font-weight: bold;\r\n\r\n    background-color: #ec5990;\r\n    border-radius: 10px;\r\n\r\n    padding: 10px 30px;\r\n\r\n    cursor: pointer;\r\n`;","import { Article, ErrorText } from './components/Styled';\r\nimport { Button } from './components/Button';\r\nimport styled from 'styled-components';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeUserInfo } from './components/ReduxAction';\r\n\r\n// 검사 시작 페이지\r\n\r\nexport function Main() {\r\n  \r\n  // 라우터 네비게이트\r\n  const navigate = useNavigate();\r\n\r\n  // 리덕스 관련\r\n  const dispatch = useDispatch();\r\n  const reduxtState = useSelector(state => state);\r\n  // console.log(reduxtState);\r\n\r\n  // 이미 입력한 이름과 성별\r\n  const userName = reduxtState?.user_name;\r\n  const userGender = reduxtState?.user_gender;\r\n\r\n  // useForm\r\n  const { register, handleSubmit, formState: {errors} } = useForm();\r\n  const onSubmit = data => {\r\n    dispatch(\r\n      changeUserInfo(\r\n        data.user_name, data.user_gender, \r\n      )\r\n    );\r\n    navigate(\"/example\");\r\n  };\r\n  // console.log(watch('user_gender'));\r\n\r\n  return (\r\n    <Article>\r\n      <h1>직업 가치관 검사</h1>\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <NameBox>\r\n          <ItemText>이름</ItemText>\r\n          <input \r\n            type=\"text\" \r\n            defaultValue={userName} \r\n            {...register(\"user_name\", { required: true })} />\r\n          {errors.user_name && <ErrorText>이름을 입력해주세요</ErrorText>}\r\n        </NameBox>\r\n        <GenderBox>\r\n          <ItemText>성별</ItemText>\r\n          <label>\r\n            <input \r\n              type=\"radio\" \r\n              name=\"radio\" \r\n              value=\"male\" \r\n              defaultChecked={userGender === \"male\"} \r\n              {...register(\"user_gender\", { required: true })} />\r\n            남자\r\n          </label>\r\n          <label>\r\n            <input \r\n              type=\"radio\" \r\n              name=\"radio\" \r\n              value=\"female\" \r\n              defaultChecked={userGender === \"female\"} \r\n              {...register(\"user_gender\", { required: true })} />\r\n            여자\r\n          </label>\r\n          {errors.user_gender && <ErrorText>성별을 선택해주세요</ErrorText>}\r\n        </GenderBox>\r\n        <Button \r\n          text=\"검사시작\"\r\n          type=\"submit\" />\r\n      </Form>\r\n    </Article>\r\n  );\r\n}\r\n\r\n// styled-components\r\n\r\nconst Form = styled.form`\r\n  margin : 30px 0;\r\n\r\n  width: 200px;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst NameBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  & input[type=\"text\"] {\r\n    all: unset;\r\n\r\n    border-color: #d3dae0;\r\n    border-radius: 5px;\r\n\r\n    background-color: white;\r\n\r\n    color: black;\r\n\r\n    width: 100%;\r\n    height: 50px;\r\n\r\n    margin-top: 2px;\r\n  };\r\n`;\r\n\r\nconst GenderBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  margin: 30px 0;\r\n\r\n  & label {\r\n    font-weight: 500;\r\n\r\n    text-align: left;\r\n\r\n    padding: 2px;\r\n  \r\n    & input[type=\"radio\"] {\r\n      -webkit-appearance:none;\r\n      -moz-appearance:none;\r\n      -ms-appearance:none;\r\n      -o-appearance:none;\r\n\r\n      width: 13px;\r\n      height: 13px;\r\n\r\n      border-radius: 13px;\r\n      background: #ffffff;\r\n\r\n      margin-right: 5px;\r\n\r\n        &:checked::before {\r\n          content:'';\r\n\r\n          display:block;\r\n\r\n          width: 75%;\r\n          height: 75%;\r\n\r\n          margin: 13% auto;\r\n\r\n          border-radius: 100%;\r\n\r\n          background: #ec5990;\r\n        };\r\n    };\r\n  \r\n  };\r\n`;\r\n\r\nconst ItemText = styled.p`\r\n  text-align: left;\r\n\r\n  font-weight: bold;\r\n`;","// 액션 정의\r\nexport const changeUserInfo = (name, gender) => ({ \r\n    type: \"CHANGE_USERINFO\",\r\n    name,\r\n    gender,\r\n  });\r\n\r\nexport const changeUserSelect = (select) => ({\r\n  type: \"CHANGE_USERSELECT\",\r\n  select,\r\n});","import styled from \"styled-components\";\r\nimport { FlexBox } from \"./Styled\";\r\n\r\nexport function Progressbar({text, percent, testPage}) {\r\n  return (\r\n    <FlexBox testPage={testPage}>\r\n      <Percent>\r\n        <h2>{text}</h2>\r\n        <h2>{percent}%</h2>\r\n      </Percent>\r\n      <ProgressbarBox>\r\n        <ProgressbarGauge percent={percent} />\r\n      </ProgressbarBox>\r\n    </FlexBox>\r\n    );\r\n  }\r\n\r\n// styled-components\r\nconst Percent = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n`;\r\n\r\nconst ProgressbarBox = styled.div`\r\n  width: 700px;\r\n  height: 30px;\r\n\r\n  border-radius: 10px;\r\n\r\n  background-color: white;\r\n\r\n  overflow: hidden;\r\n\r\n  margin: 10px 0;\r\n`;\r\n\r\nconst ProgressbarGauge = styled.div`\r\n  width: ${props => String(props.percent) + \"%\"};\r\n  height: 100%;\r\n\r\n  background-color: #ec5990;\r\n\r\n`;","import styled from \"styled-components\";\r\nimport { useFormContext } from \"react-hook-form\";\r\nimport { useState } from 'react';\r\n\r\nexport function CheckBox(props) {\r\n\r\n  // 항목 1에 대한 정보\r\n  const title01 = props.value01;\r\n  const value01 = props.answerscore01;\r\n  const answer01 = props.answer01;\r\n\r\n  // 항목 2에 대한 정보\r\n  const title02 = props.value02;\r\n  const value02 = props.answerscore02;\r\n  const answer02 = props.answer02;\r\n\r\n  // 공통 정보\r\n  const name = props.name;\r\n\r\n  // CheckBox에서 선택한 항목 제어\r\n  const [userSelect, setUserSelect] = useState({});\r\n  // console.log(\"userSelect\", userSelect);\r\n\r\n  // useForm\r\n  const { register } = useFormContext();\r\n\r\n  // 선택한 항목 저장하기\r\n  const getSelect = (event) => {\r\n    setUserSelect((cur) => {\r\n        const newcur = {\r\n          ...cur,\r\n          [event.target.name] : event.target.value,\r\n        }\r\n        return newcur;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FlexBox>\r\n        <Text>두 개 가치 중에 자신에게 더 중요한 가치를 선택하세요.</Text>\r\n        <RadioBox>\r\n          <div>\r\n            <label>\r\n              <input \r\n                type=\"radio\" \r\n                name={name}\r\n                value={value01} \r\n                onClick={(event) => getSelect(event)} \r\n                checked={name === \"ex\" ? null : userSelect[name] === value01}\r\n                {...register(name, { required: true })}\r\n              />\r\n              <span>\r\n                {answer01}\r\n              </span> : {title01}\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <label>\r\n              <input \r\n                type=\"radio\" \r\n                name={name}\r\n                value={value02} \r\n                onClick={(event) => getSelect(event)} \r\n                checked={name === \"ex\" ? null : userSelect[name] === value02}\r\n                {...register(name, { required: true })}\r\n              />\r\n              <span>\r\n                {answer02}\r\n              </span> : {title02}\r\n            </label>\r\n          </div>\r\n        </RadioBox>\r\n      </FlexBox>\r\n    </>\r\n  );\r\n}\r\n\r\n// styled-components\r\nconst FlexBox = styled.div`\r\n    width: 700px;\r\n    height: 250px;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    background-color: white;\r\n    border-radius: 10px;\r\n\r\n    margin-bottom: 30px;\r\n`;\r\n\r\nconst Text = styled.p`\r\n    font-weight: bold;\r\n    font-size: 0.8rem;\r\n    color: #081229;\r\n`;\r\n\r\nconst RadioBox = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    text-align: left;\r\n\r\n    line-height: 30px;\r\n\r\n    margin: 30px 0 0 80px;\r\n\r\n    width: 600px;\r\n\r\n    & label {\r\n      font-size: 0.8rem;\r\n      color: #081229;\r\n\r\n      & span {\r\n        font-weight: bold;\r\n        color: #081229;\r\n      };\r\n    };\r\n\r\n    & input[type=\"radio\"] {\r\n\r\n      -webkit-appearance:none;\r\n      -moz-appearance:none;\r\n      -ms-appearance:none;\r\n      -o-appearance:none;\r\n\r\n      width: 15px;\r\n      height: 15px;\r\n\r\n      border: 2px solid #081229;\r\n      border-radius: 13px;\r\n      background: #ffffff;\r\n\r\n      margin-right: 10px;\r\n      \r\n      &:checked::before {\r\n        content:'';\r\n\r\n        display:block;\r\n\r\n        width: 81%;\r\n        height: 81%;\r\n\r\n        margin: 10%;\r\n\r\n        border-radius: 100%;\r\n\r\n        background: #081229;\r\n      };\r\n    };\r\n`;","import { Button } from './components/Button';\r\nimport { Progressbar } from './components/Progressbar';\r\nimport { Article, ErrorText, Form } from './components/Styled'; \r\nimport { CheckBox } from \"./components/CheckBox\";\r\nimport styled from \"styled-components\";\r\nimport { useForm, FormProvider } from 'react-hook-form';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// 검사 예시 페이지\r\n\r\nexport function Example() {\r\n  // 라우터 네비게이트\r\n  const navigate = useNavigate();\r\n\r\n  // useForm (양식 컨텍스트에 연결)\r\n  const methods = useForm();\r\n  const onSubmit = () => { navigate(\"/test\"); }\r\n\r\n  return (\r\n    <Article>\r\n      <Progressbar text=\"진행률 예시\" percent=\"20\" />\r\n      <Explanation>\r\n        <p>직업과 관련된 두개의 가치 중에서 자기에게 더 중요한 가치에 표시하세요.</p>\r\n        <p>가치의 뜻을 잘 모르겠다면 설명을 확인해보세요.</p>\r\n      </Explanation>\r\n      <FormProvider {...methods} >\r\n        <Form onSubmit={methods.handleSubmit(onSubmit)}>\r\n          <CheckBox \r\n            name=\"ex\" \r\n            answer01=\"능력발휘\" \r\n            answer02=\"자율성\" \r\n            value01=\"직업을 통해 자신의 능력을 발휘하는 것입니다.\" \r\n            value02=\"일하는 시간과 방식에 대해서 스스로 결정할 수 있는 것입니다.\" \r\n          />\r\n          <Button \r\n            text=\"검사시작\" \r\n            type=\"submit\" />\r\n          {methods.formState.errors?.ex && \r\n            <ErrorText>선택하지않은 항목이 있습니다.</ErrorText>}\r\n        </Form>\r\n      </FormProvider>\r\n    </Article>\r\n  );\r\n}\r\n\r\n// styled-components\r\nconst Explanation = styled.div`\r\n  font-size: 1rem;\r\n  color: #293845;\r\n\r\n  margin: 30px 0;\r\n`;","import { useState, useEffect } from \"react\";\r\nimport { CheckBox } from \"./components/CheckBox\";\r\nimport { Button } from './components/Button';\r\nimport { Progressbar } from './components/Progressbar';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useForm, FormProvider } from 'react-hook-form';\r\nimport { Article, Form } from './components/Styled';\r\nimport styled from \"styled-components\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeUserSelect } from './components/ReduxAction';\r\n\r\nexport function Test() {\r\n\r\n  // 라우터 네비게이트\r\n  const navigate = useNavigate();\r\n\r\n  // 페이지 관련 변수\r\n  const [result, setResult] = useState([]); // API로 불러온 결과\r\n  const page = Math.ceil(result.length / 5); // 전체 페이지\r\n  const [currentPage, setCurrentPage] = useState(0); // 현재 페이지\r\n  const currentQ = result.slice(currentPage*5, (currentPage+1)*5) // 현재 문항 번호\r\n  const percent = Math.floor((currentPage+1)/page*100) // 검사 진행률\r\n  \r\n  // 리덕스 관련\r\n  const dispatch = useDispatch();\r\n\r\n  // useForm (양식 컨텍스트에 연결)\r\n  const methods = useForm();\r\n  const onSubmit = (data) => { \r\n    dispatch(\r\n      changeUserSelect(\r\n        data, \r\n      )\r\n    );\r\n    moveNextPage();\r\n  };\r\n\r\n  // 이전 버튼 클릭 시 동작\r\n  const movePrevPage = () => {\r\n    if (currentPage !== 0) {\r\n      setCurrentPage(currentPage-1);\r\n    }\r\n    else {\r\n      navigate(-1);\r\n    }\r\n  };\r\n\r\n  // 다음 버튼 클릭 시 동작\r\n  const moveNextPage = () => {\r\n    if (currentPage !== 5) {\r\n      setCurrentPage(currentPage+1);\r\n    }\r\n    else {\r\n      navigate(\"/finish\");\r\n    }\r\n  };\r\n\r\n    // 심리검사 항목 API 호출 함수\r\n    const QuestionCall = async () => {\r\n      try {\r\n        const response = await axios.get('https://inspct.career.go.kr/openapi/test/questions?apikey=fbc9e4d5e474e6e35b5de6d43988d70d&q=6');\r\n        const res = response.data.RESULT;\r\n        setResult([...res]);\r\n      }\r\n      catch (error) {\r\n        console.error(\"error\", error);\r\n      }\r\n    };\r\n  \r\n  // CheckBox 컴포넌트 5개를 만들어낼 함수\r\n  const renderQ = currentQ.map((item, index) => {\r\n        const name = \"B\" + String(index+(currentPage*5)+1);\r\n\r\n        return (\r\n          <CheckBox \r\n            key={index}\r\n            name={name}\r\n            answer01={item[\"answer01\"]} \r\n            answer02={item[\"answer02\"]} \r\n            answerscore01={item[\"answerScore01\"]} \r\n            answerscore02={item[\"answerScore02\"]} \r\n            value01={item[\"answer03\"]} \r\n            value02={item[\"answer04\"]} \r\n          />\r\n        )\r\n      });\r\n\r\n  // API 호출(한번만)\r\n  useEffect(() => { QuestionCall() }, []);\r\n\r\n  // 페이지가 바뀔 때마다 마우스 스크롤 위로!\r\n  useEffect(() => { window.scrollTo({top: 0, behavior:\"smooth\"}) }, [currentPage]);\r\n\r\n  return (\r\n    <Article long={true}>\r\n      <Progressbar \r\n        text=\"검사 진행률\" \r\n        percent={percent} \r\n        testPage={true} />\r\n      <FormProvider {...methods} >\r\n        <Form onSubmit={methods.handleSubmit(onSubmit)}>\r\n          { renderQ }\r\n          <ButtonBox>\r\n            <Button \r\n              type=\"button\" \r\n              text=\"이전\" \r\n              movePrevPage={movePrevPage} />\r\n            <Button \r\n              type=\"submit\" \r\n              text={currentPage !== 5 ? \"다음\" : \"제출\"} />\r\n          </ButtonBox>\r\n        </Form>\r\n      </FormProvider>\r\n    </Article>\r\n  );\r\n}\r\n\r\n// styled-components\r\nconst ButtonBox = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    width: 700px;\r\n\r\n    margin-bottom: 50px;\r\n`;","import { useEffect } from \"react\";\r\nimport { Button } from './components/Button';\r\nimport { Article, Explanation } from './components/Styled';\r\nimport axios from 'axios';\r\nimport { Link, } from 'react-router-dom';\r\nimport { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { objectToString } from './functions/objectToString';\r\n\r\n// 검사 예시 페이지\r\n\r\nexport function Finish() {\r\n  \r\n  // 리덕스에서 유저 이름, 성별, 선택 값 가져오기\r\n  const reduxtState = useSelector(state => state);\r\n  const username = reduxtState?.user_name;\r\n  const usergender = reduxtState?.user_gender;\r\n  const total = reduxtState?.user_select;\r\n\r\n  // 가공한 결과 값을 활용해서 POST 요청하는 함수\r\n  useEffect(() => {\r\n    const string_total = objectToString(total); // B1=2 B2=4... 형태로 변경\r\n    // console.log(\"string_total\", string_total);\r\n\r\n    // Post 요청\r\n    axios({\r\n      method: \"post\",\r\n      url: \"https://inspct.career.go.kr/openapi/test/report\",\r\n      data: {\r\n        \"apikey\": \"fbc9e4d5e474e6e35b5de6d43988d70d\",\r\n        \"qestrnSeq\": \"6\",\r\n        \"trgetSe\": \"100209\",\r\n        \"name\": username,\r\n        \"gender\": usergender === \"female\" ? \"100324\" : \"100323\",\r\n        \"grade\": \"\",\r\n        \"startDtm\": 1550466291034,\r\n        \"answers\": string_total\r\n      },\r\n       }) // Post 요청 결과 값이 주소로 옴 ㅡㅡ\r\n       .then((response) => {\r\n          const url = response.data.RESULT.url;\r\n          // console.log(\"data\", url);\r\n\r\n          const url_seq = url.split('=')[1];\r\n          // console.log(\"url_seq\", url_seq);\r\n\r\n          // url_seq로 결과 값 Get 요청\r\n          axios.get(`https://www.career.go.kr/inspct/api/psycho/report?seq=${url_seq}`)\r\n          .then((response) => {\r\n            // console.log(\"response.data\", response.data);\r\n\r\n            const score = (response.data.result.wonScore).trim();\r\n            // console.log(\"score\", score);\r\n\r\n            // score 가공 : 상대적으로 중요시 하는 가치와 덜 중요한 가치 뽑기\r\n            const score_list = score.split(' ');\r\n            let score_object;\r\n            score_list.forEach((num, index) => {\r\n              const data = num.split('=')[1];\r\n              score_object = {\r\n                ...score_object, \r\n                [index] : Number(data)\r\n              };\r\n            });\r\n            // console.log(\"score_object\", score_object);\r\n            sessionStorage.setItem('result', JSON.stringify(score_object))\r\n          })\r\n          .catch((error) => {\r\n            console.log(error, \"GET 에러입니다\");\r\n          })\r\n      }).catch((error) => {\r\n        console.log(error, \"POST 에러입니다\");\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <Article>\r\n        <FinishText>검사가 완료되었습니다.</FinishText>\r\n      <Explanation>\r\n        검사 결과는 여러분이 직업을 선택할 때 상대적으로 어떠한 가치를 중요하게 생각하는지를 알려주고,\r\n        <br />\r\n        중요 가치를 충족시켜줄 수 있는 직업에 대해 생각해 볼 기회를 제공합니다.\r\n        <br />\r\n        <br />\r\n        결과가 궁금하다면 아래 '결과 보기'를 눌러주세요 :)\r\n      </Explanation>\r\n      <Link to=\"/result\">\r\n        <Button type=\"button\" text=\"결과 보기\" />\r\n      </Link>\r\n    </Article>\r\n  );\r\n}\r\n\r\n// styled-components\r\nconst FinishText = styled.h2`\r\n  color: #ec5990;\r\n`;","// 객체를 value 기준으로 오름차순 정렬해서 문자열로 반환하는 함수\r\n// 객체가 순서대로 있지 않은 경우 처음부터 사용!\r\n\r\n// 인자 값 {'B3':'3', 'B1':'1', 'B2':'2', ...}\r\n\r\nexport function objectToString(object) {\r\n    const array = [];\r\n\r\n    for (let i in object) {\r\n        array.push([i, object[i]]);\r\n    }\r\n\r\n    const sort_array = array.sort((a, b) => {\r\n      return a[1] - b[1]\r\n    }); // 반환 값 [['B1', '1'], ['B2', '2'], ['B3', '3'], ...]\r\n    \r\n    // 객체가 순서대로 있는 경우에는 여기서부터 사용!\r\n    let string = \"\";\r\n\r\n    for (let j in sort_array) {\r\n        string = string.concat(\" \", `${sort_array[j][0]}=${sort_array[j][1]}`);\r\n    }\r\n\r\n    return string.trim(); // 처음에 오는 공백 제거\r\n}\r\n\r\n// 최종 반환 값 \"B1=1 B2=2 B3=3 ...\"","import {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n  } from 'chart.js';\r\n  import { Bar } from 'react-chartjs-2';\r\nimport styled from 'styled-components';\r\n\r\n// 결과 테이블\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n  );\r\n\r\nexport function ResultChart() {\r\n  \r\n  // 가치별 인덱스\r\n  const valueIndex = {\r\n    0: \"능력발휘\", \r\n    1: \"자율성\", \r\n    2: \"보수\", \r\n    3: \"안정성\", \r\n    4: \"사회적인정\", \r\n    5: \"사회봉사\", \r\n    6: \"자기계발\", \r\n    7: \"창의성\"\r\n  };\r\n\r\n  const value = JSON.parse(sessionStorage.getItem('result'));\r\n\r\n    const data = {\r\n      labels: Object.values(valueIndex),\r\n      datasets: [\r\n        {\r\n          label: '검사 점수',\r\n          backgroundColor: '#ec5990',\r\n          data: Object.values(value),\r\n        },\r\n      ],\r\n    };\r\n\r\n    const options = {\r\n        scales: {\r\n            y: { // 좌표값\r\n              max: 10,\r\n            }\r\n        },\r\n        plugins: {\r\n            legend: { // 범례 스타일링\r\n              labels: {\r\n                  position: \"right\",\r\n              }\r\n            }\r\n        }\r\n    };\r\n  \r\n    return (\r\n        <ResultChartDiv>\r\n            <Bar data={data} options={options} />\r\n        </ResultChartDiv>\r\n    )\r\n  }\r\n\r\n  // styled-components\r\n  const ResultChartDiv = styled.div`\r\n    width: 900px;\r\n\r\n    padding: 50px;\r\n\r\n    background-color: white;\r\n  `;","import { styled as styles } from '@mui/material/styles';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTodayDate } from '../functions/getTodayDate';\r\n\r\nconst StyledTableCell = styles(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: \"#ec5990\",\r\n    color: theme.palette.common.white,\r\n    fontWeight: \"bold\",\r\n    border: \"2px solid white\",\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    backgroundColor: \"#dbdbdb\",\r\n  },\r\n}));\r\n\r\nconst StyledTableRow = styles(TableRow)(({ theme }) => ({\r\n  '&:nth-of-type(odd)': {\r\n    backgroundColor: theme.palette.action.hover,\r\n  },\r\n  // hide last border\r\n  '&:last-child td, &:last-child th': {\r\n    border: \"2px solid white\",\r\n  },\r\n}));\r\n\r\nfunction createData(name, gender, date) {\r\n  return { name, gender, date };\r\n}\r\n\r\nexport default function UserTable() {\r\n\r\n  // 유저 이름, 성별, 결과 값 가져오기\r\n  const reduxtState = useSelector(state => state);\r\n  const username = reduxtState?.user_name;\r\n  const usergender = reduxtState?.user_gender;\r\n\r\n  // 날짜 구하기\r\n  const TodayDate = getTodayDate();\r\n\r\n  const rows = [\r\n    createData(username, usergender === \"female\" ? \"여자\" : \"남자\", TodayDate),\r\n  ];\r\n\r\n  return (\r\n    <UserTableDiv>\r\n        <TableContainer component={Paper}>\r\n        <Table sx={{ maxWidth: 700 }} aria-label=\"customized table\">\r\n            <TableHead>\r\n            <TableRow>\r\n                <StyledTableCell align=\"center\">이름</StyledTableCell>\r\n                <StyledTableCell align=\"center\">성별</StyledTableCell>\r\n                <StyledTableCell align=\"center\">검사 날짜</StyledTableCell>\r\n            </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n            {rows.map((row, index) => (\r\n                <StyledTableRow key={index}>\r\n                <StyledTableCell align=\"center\">{row.name}</StyledTableCell>\r\n                <StyledTableCell align=\"center\">{row.gender}</StyledTableCell>\r\n                <StyledTableCell align=\"center\">{row.date}</StyledTableCell>\r\n                </StyledTableRow>\r\n            ))}\r\n            </TableBody>\r\n        </Table>\r\n        </TableContainer>\r\n    </UserTableDiv>\r\n  );\r\n}\r\n\r\n// styled-components\r\nconst UserTableDiv = styled.div`\r\n  width: 700px;\r\n\r\n  margin: 0 auto;\r\n`;","export function getTodayDate() {\r\n    const today = new Date(); // Mon Dec 20 2021 22:04:03 GMT+0900 (한국 표준시)\r\n\r\n    const year = today.getFullYear(); // 2021\r\n    const month = ('0' + (today.getMonth() + 1)).slice(-2); // 12\r\n    const day = ('0' + today.getDate()).slice(-2); // 20\r\n\r\n    // 원하는 문자열 형태로 날짜 가공하기\r\n    // const dateString = year + month + day; // 20211220\r\n    const dateString = year + '.' + month + '.' + day; // 2021.12.20\r\n\r\n    return dateString;\r\n}","import { styled as styles } from '@mui/material/styles';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledTableCell = styles(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    backgroundColor: \"#ec5990\",\r\n    color: theme.palette.common.white,\r\n    fontWeight: \"bold\",\r\n    border: \"2px solid white\",\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    backgroundColor: \"#dbdbdb\",\r\n    border: \"2px solid white\",\r\n  },\r\n}));\r\n\r\nconst StyledTableRow = styles(TableRow)(({ theme }) => ({\r\n  '&:nth-of-type(odd)': {\r\n    backgroundColor: theme.palette.action.hover,\r\n  },\r\n  // hide last border\r\n  '&:last-child td, &:last-child th': {\r\n  },\r\n}));\r\n\r\nfunction createData(field, job) {\r\n  return { field, job };\r\n}\r\n\r\nexport default function JobTable({type, jobs}) {\r\n\r\n  // console.log(\"jobs\", jobs);\r\n\r\n  const school = {\r\n    1: \"중졸 이하\",\r\n    2: \"고졸\",\r\n    3: \"전문대졸\",\r\n    4: \"대졸\",\r\n    5: \"대학원졸\",\r\n  };\r\n\r\n  const major = {\r\n    0: \"계열무관\",\r\n    1: \"인문\",\r\n    2: \"사회\",\r\n    3: \"교육\",\r\n    4: \"공학\",\r\n    5: \"자연\",\r\n    6: \"의학\",\r\n    7: \"예체능\",\r\n  };\r\n\r\n  const rows = Object.keys(type === \"school\" ? school : major).map((item) => {\r\n    return (\r\n      createData(\r\n        type === \"school\" ? school[item] : major[item], \r\n        jobs?.[item]?.join(\", \")\r\n      )\r\n    );\r\n  });\r\n\r\n  // console.log(\"rows\", rows);\r\n\r\n  return (\r\n    <UserTableDiv>\r\n        <TableContainer component={Paper}>\r\n        <Table sx={{ minWidth: 700, height: 500 }} aria-label=\"customized table\">\r\n            <TableHead>\r\n            <TableRow>\r\n                <StyledTableCell align=\"center\">\r\n                  {type === \"school\" ? \"학력\" : \"전공\"}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">직업</StyledTableCell>\r\n            </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n            {rows?.map((row, index) => (\r\n                <StyledTableRow key={index}>\r\n                  <StyledTableCell component=\"th\" scope=\"row\" align=\"center\" sx={{ width: 150, fontWeight: \"bold\" }}>\r\n                    {row?.field}\r\n                  </StyledTableCell>\r\n                <StyledTableCell align=\"center\">{row?.job}</StyledTableCell>\r\n                </StyledTableRow>\r\n            ))}\r\n            </TableBody>\r\n        </Table>\r\n        </TableContainer>\r\n    </UserTableDiv>\r\n  );\r\n}\r\n\r\n// styled-components\r\nconst UserTableDiv = styled.div`\r\n  width: 900px;\r\n\r\n  margin: 10px auto;\r\n\r\n  & .css-1eorqe0-MuiTableCell-root {\r\n    padding: 30px;\r\n  }\r\n`;","import { useEffect, useState } from \"react\";\r\nimport { Article, FlexBox, Explanation } from './components/Styled';\r\nimport { Button } from './components/Button';\r\nimport { ResultChart } from './chart/ResultChart';\r\nimport UserTable from './chart/UserTable';\r\nimport JobTable from './chart/JobTable';\r\nimport axios from 'axios';\r\nimport { Link, } from 'react-router-dom';\r\nimport styled from \"styled-components\";\r\n\r\nexport function Result() {\r\n\r\n  // 결과에 따른 최고 가치관\r\n  const result = JSON.parse(sessionStorage.getItem('result'));\r\n  const firstValue = getTopValue();\r\n  const secondValue = getTopValue();\r\n  // console.log(\"firstValue\", firstValue);\r\n  // console.log(\"secondValue\", secondValue);\r\n\r\n  // 학력별 직업 정보\r\n  const [schoolJob, setSchoolJob] = useState({});\r\n  const [majorJob, setMajorJob] = useState({});\r\n        \r\n  // console.log(\"schoolJob\", schoolJob);\r\n  // console.log(\"majorJob\", majorJob);\r\n\r\n  // 직업 정보를 가져오기 위한 최고 가치관 구하는 함수\r\n  function getTopValue() {\r\n    const resultValueArray = Object.values(result)\r\n    const maxValue = Math.max(...resultValueArray);\r\n    let topValue = resultValueArray.findIndex(item => item === maxValue);\r\n    result[topValue] = 0;\r\n\r\n    return topValue + 1; // 가치관은 1부터 시작한다\r\n  };\r\n\r\n  // 직업 정보 가져오는 함수\r\n  async function jobCall() {\r\n    try {\r\n      const school = {\r\n        1: [],\r\n        2: [],\r\n        3: [],\r\n        4: [],\r\n        5: [],\r\n      };\r\n      await axios.get(`https://inspct.career.go.kr/inspct/api/psycho/value/jobs?no1=${firstValue}&no2=${secondValue}`)\r\n        .then(res => res.data.forEach((item) => school[item[2]].push(item[1])))\r\n        .then(() => setSchoolJob(school));\r\n\r\n      const major = {\r\n        0: [],\r\n        1: [],\r\n        2: [],\r\n        3: [],\r\n        4: [],\r\n        5: [],\r\n        6: [],\r\n        7: [],\r\n      };\r\n      await axios.get(`https://inspct.career.go.kr/inspct/api/psycho/value/majors?no1=${firstValue}&no2=${secondValue}`)\r\n        .then(res => (res.data).forEach((item) => major[item[2]].push(item[1])))\r\n        .then(() => setMajorJob(major));\r\n\r\n    } catch (error) {\r\n      console.error(\"error\", error);\r\n    }\r\n  }\r\n\r\n  // 추천 직업 받아오기\r\n  useEffect(() => { jobCall() }, []);\r\n\r\n  return (\r\n    <Article long={true}>\r\n      <Title>직업가치관검사 결과표</Title>\r\n      <UserTable />\r\n      <FlexBox>\r\n        <TableTitle>직업가치관 결과</TableTitle>\r\n        <Explanation resultPage={true}>\r\n          여러분이 상대적으로 어떤 가치관을 중요하게 여기고<br />\r\n          어떤 가치관을 덜 중요하게 여기는지 확인해보세요.\r\n        </Explanation>\r\n        <ResultChart />\r\n      </FlexBox>\r\n      <FlexBox>\r\n        <TableTitle>나의 가치관과 관련이 높은 직업</TableTitle>\r\n        <Explanation resultPage={true}>\r\n          여러분이 중요하게 생각한 가치관과 관련이 높은 직업을 학력별, 직업별로 분류했습니다.<br />\r\n          어떤 직업군이 있는지 확인해보세요.\r\n        </Explanation>\r\n        <JobTable type=\"school\" jobs={schoolJob} />\r\n        <JobTable type=\"major\" jobs={majorJob} />\r\n      </FlexBox>\r\n      <LinkBox to=\"/\" onClick={() => { sessionStorage.clear(); }}>\r\n        <Button text=\"다시 검사\" type=\"button\" />\r\n      </LinkBox>\r\n    </Article>\r\n  );\r\n}\r\n\r\n// styled-components\r\nconst Title = styled.div`\r\n  font-size: 2rem;\r\n  font-weight: bold;\r\n\r\n  border-bottom: 5px solid #ec5990;\r\n\r\n  margin: 50px 0 30px 0;\r\n`;\r\n\r\nconst TableTitle = styled.p`\r\n  width: 800px;\r\n\r\n  text-align: left;\r\n\r\n  font-weight: bold;\r\n  font-size: 1.5rem;\r\n\r\n  margin-top: 50px;\r\n`;\r\n\r\nconst LinkBox = styled(Link)`\r\n  margin: 50px 0;\r\n`;","import React from \"react\";\r\nimport { Main } from './Main';\r\nimport { Example } from './Example';\r\nimport { Test } from './Test';\r\nimport { Finish } from './Finish';\r\nimport { Result } from './Result';\r\nimport {\r\n  Route,\r\n  Routes,\r\n} from 'react-router-dom';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Routes>\r\n        <Route path=\"/\" element={<Main />} />\r\n        <Route path=\"/example\" element={<Example />} />\r\n        <Route path=\"/test\" element={<Test />} />\r\n        <Route path=\"/finish\" element={<Finish />} />\r\n        <Route path=\"/result\" element={<Result />} />\r\n      </Routes>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// styled-components\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    box-sizing: border-box;\r\n\r\n    margin: 0;\r\n    padding: 0;\r\n\r\n    color: white;\r\n\r\n    text-decoration: none;\r\n  }\r\n\r\n  html {\r\n    font-size: 18px;\r\n  }\r\n\r\n  body {   \r\n    text-align: center;\r\n\r\n    background: radial-gradient( circle, #23324d, #0e172e, #081229 );\r\n  }\r\n\r\n  h1 {\r\n    font-weight: bold;\r\n    font-size: 2rem;\r\n  }\r\n`;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {\r\n  BrowserRouter,\r\n} from 'react-router-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'; // 리덕스 개발자도구\r\n\r\n// 상태 초기화\r\nconst initialState = {\r\n  user_name: \"\",\r\n  user_gender: \"\",\r\n  user_select: {},\r\n};\r\n\r\n// 리듀서 정의\r\nfunction reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'CHANGE_USERINFO':\r\n      return {\r\n        ...state, \r\n        user_name: action.name,\r\n        user_gender: action.gender, \r\n      };\r\n    case 'CHANGE_USERSELECT':\r\n      return {\r\n        ...state, \r\n        user_select: {...state.user_select, ...action.select},\r\n      };\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nlet store = createStore(reducer, composeWithDevTools());\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}